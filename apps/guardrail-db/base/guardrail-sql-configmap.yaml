apiVersion: v1
kind: ConfigMap
metadata:
  name: guardrail-initdb-sql
data:
  guardrail.sql: |
    DO $$
    BEGIN
        IF NOT EXISTS (SELECT FROM pg_catalog.pg_user WHERE usename = 'guardrail') THEN
            CREATE USER guardrail WITH PASSWORD '{{GUARDRAIL_PASSWORD}}';
        END IF;
    END$$;

    DROP DATABASE guardrail WITH (FORCE);
    DROP DATABASE apalis WITH (FORCE);

    SELECT 'CREATE DATABASE guardrail'
    WHERE NOT EXISTS (SELECT FROM pg_database WHERE datname = 'guardrail')
    \gexec

    GRANT ALL PRIVILEGES ON DATABASE guardrail TO guardrail;

    SELECT 'CREATE DATABASE apalis'
    WHERE NOT EXISTS (SELECT FROM pg_database WHERE datname = 'apalis')
    \gexec

    GRANT ALL PRIVILEGES ON DATABASE apalis TO guardrail;

    \c apalis;
    GRANT ALL ON SCHEMA public TO guardrail;

    \c guardrail;
    GRANT ALL ON SCHEMA public TO guardrail;

    DO $$
    BEGIN
        IF NOT EXISTS (SELECT FROM pg_catalog.pg_roles WHERE rolname = 'authenticator') THEN
            CREATE ROLE authenticator LOGIN PASSWORD '{{AUTHENTICATOR_PASSWORD}}' NOINHERIT NOCREATEDB NOCREATEROLE NOSUPERUSER;
        END IF;
        IF NOT EXISTS (SELECT FROM pg_catalog.pg_roles WHERE rolname = 'guardrail_webuser') THEN
            CREATE ROLE guardrail_webuser LOGIN PASSWORD '{{WEBUSER_PASSWORD}}' NOINHERIT NOCREATEDB NOCREATEROLE NOSUPERUSER;
        END IF;
        IF NOT EXISTS (SELECT FROM pg_catalog.pg_roles WHERE rolname = 'guardrail_anonymous') THEN
            CREATE ROLE guardrail_anonymous NOLOGIN;
        END IF;
        IF NOT EXISTS (SELECT FROM pg_catalog.pg_roles WHERE rolname = 'guardrail_apiuser') THEN
            CREATE ROLE guardrail_apiuser NOLOGIN;
        END IF;
    END$$;

    GRANT guardrail_anonymous TO authenticator;
    GRANT guardrail_apiuser TO authenticator;
